@page "/contactlist"
@using EntreprisesContacts.Shared.Models

<h1>Contact Data</h1>
<p>This component demonstrates CRUD operation on Contact data</p>

<div class="row">
    <div class="col-md-6">
        <a href='/contact/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Contact
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search contact by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterCont" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

@if (contList == null)
{
    <p><em>No contacts to display</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Entreprise</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cont in contList)
            {
                <tr>
                    <td>@cont.Firstname</td>
                    <td>@cont.Lastname</td>
                    <td>@cont.Phone</td>
                    <td>@cont.Email</td>
                    <td>@cont.Entreprise</td>
                    <td>
                        <a href='/contact/edit/@cont.ContactId' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteContModal"
                                @onclick="(() => DeleteConfirm(cont.ContactId))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="modal fade" id="deleteContModal" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Delete Contact</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h4>Do you want to delete this contact?</h4>
                    <table class="table">
                        <tbody>
                            <tr>
                                <td>First Name</td>
                                <td>@cont.Firstname</td>
                            </tr>
                            <tr>
                                <td>Last Name</td>
                                <td>@cont.Lastname</td>
                            </tr>
                            <tr>
                                <td>Phone</td>
                                <td>@cont.Phone</td>
                            </tr>
                            <tr>
                                <td>Email</td>
                                <td>@cont.Email</td>
                            </tr>
                            <tr>
                                <td>Entreprise</td>
                                <td>@cont.Entreprise</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="(async () => await DeleteContact(cont.ContactId))" data-bs-dismiss="modal">YES</button>
                    <button class="btn btn-warning" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
}
@code{
    [Inject]
    HttpClient Http { get; set; }

    protected List<Contact> contList = new();
    protected List<Contact> searchContData = new();
    protected Contact cont = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetContact();
    }

    protected async Task GetContact()
    {
        contList = await Http.GetFromJsonAsync<List<Contact>>("api/Contact");
        searchContData = contList;
    }

    protected void FilterCont()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            contList = searchContData
                .Where(x => x.Firstname.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            contList = searchContData;
        }
    }

    protected void DeleteConfirm(int contID)
    {
        cont = contList.FirstOrDefault(x => x.ContactId == contID);
    }

    protected async Task DeleteContact(int contID)
    {
        await Http.DeleteAsync("api/Contact/" + contID);
        await GetContact();
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        contList = searchContData;
    }
}